#include <sys/types.h>
#include <iostream>

using namespace std;

static const bool verbose = false;

int
main(void)
{
	static const u_char a[] =
	{
		0x31, 0x1c, 0xef, 0x62, 0xdf, 0xa7, 0x43, 0x23, 0x78, 0x92, 0x22, 0x6a,
		0x38, 0x12, 0x14, 0xa4, 0x65, 0x02, 0x2b, 0x00, 0x9c, 0x00, 0x57, 0x5e,
		0x10, 0x85, 0x50, 0x73, 0xd0, 0xb1, 0x17, 0x2b, 0x49, 0xac, 0x49, 0xc4,
		0x33, 0x21, 0xb4, 0x48, 0x23, 0x8c, 0x27, 0x98, 0x12, 0x34, 0x80, 0x00,
		0x48, 0xff, 0xb4, 0x8f, 0x04, 0x2e, 0x24, 0x2d, 0x92, 0xc7, 0x82, 0xe2,
		0xa6, 0xa5, 0x20, 0x20, 0x98, 0x11, 0x84, 0x26, 0xb7, 0xcc, 0x28, 0xf3,
		0xe6, 0x98, 0x38, 0x23, 0xdc, 0xba, 0x28, 0x44, 0x42, 0x39, 0x44,
	}, b[] =
	{
		0x12, 0x14, 0xa4, 0x65, 0x02, 0x2b, 0x00, 0x9c, 0x00, 0x57, 0x5e, 0x10,
		0x85, 0x50, 0x73, 0xd0, 0xb1, 0x17, 0x2b, 0x49, 0xac, 0x49, 0xc4, 0x33,
		0x21, 0xb4, 0x48, 0x23, 0x8c, 0x27, 0x98, 0x12, 0x34, 0x80, 0x00, 0x48,
		0xff, 0xb4, 0x8f, 0x04, 0x2e, 0x24, 0x2d, 0x92, 0xc7, 0x82, 0xe2, 0xa6,
		0xa5, 0x20, 0x20, 0x98, 0x11,
	};

	u_int inputPos = 0;
	u_int checkSum = 0;
	u_int stack_148 = 0x11;

	ios_base::sync_with_stdio(false);

	freopen(NULL, "rb", stdin);
	while (cin)
	{
		int edx = 0x3521cfb3;
		int eax = stack_148;
		u_int64_t result = (u_int64_t)eax * (u_int)edx;
		eax = result & 0xffffffff;
		edx = result >> 32;
		eax = stack_148;
		eax-= edx;
		eax>>= 1;
		edx+= eax;
		eax = stack_148;
		edx>>= 5;
		edx*= 0x35;
		eax-= edx;

		assert(eax < 0x35);
		u_char bCh = b[eax];

		for (u_int aOffset = 0; aOffset < size(a); ++aOffset)
		{
			u_char inCh;
			if (!cin.read((char *)&inCh, sizeof(inCh)))
				break;

			u_char aCh = ~a[aOffset];
			u_char outCh = (aCh ^ bCh) ^ inCh;
			checkSum+= outCh;
			if (verbose)
				clog << hex
						<< inputPos << ": "
						<< "~a[" << aOffset << "](=" << (u_int)aCh << ") ^ "
						<< "b[" << eax << "](=" << (u_int)bCh << ") ^ "
						<< (u_int)inCh << " = "
						<< (u_int)outCh << '(' << (u_char)(isprint(outCh) ? outCh : '?') << ')'
						<< endl;
			++inputPos;
			cout << outCh;
		}

		++stack_148;
	}

	if (!cin.eof())
		throw runtime_error("Read error at offset " + to_string(inputPos));

	clog << "Checksum is " << hex << checkSum << endl;

	//return (checkSum == 0x1057f8 || checkSum == 0x252ed7) ? 0 : 1;
	return 0;
}
